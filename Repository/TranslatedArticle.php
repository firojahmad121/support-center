<?php

namespace Webkul\UVDesk\SupportCenterBundle\Repository;

use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\ORM\Query;
use Webkul\UserBundle\Entity\Company;

/**
 * Website
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TranslatedArticle extends EntityRepository
{
    public function getTranslatedArticleByArticle($article)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('ta')->from($this->getEntityName(), 'ta')
            ->andWhere('ta.article = :article')
            ->setParameter('article', $article->getId());
        $results = $qb->getQuery()->getArrayResult();
        $formattedData = [];
        foreach($results as $result) {
            $formattedData[$result['locale']] = $result;
        }
        return $formattedData;
    }

    public function getAllTranslatedHistoryByArticle($articleId)
    {
        $article = $this->getEntityManager()->getRepository('UVDeskSupportCenterBundle:Article')->findOneBy([
                                        'id' => $articleId ]);

        $results = [];
        if($article) {
            $qb = $this->getEntityManager()->createQueryBuilder();
            $qb->select('DISTINCT tah.id,  tah.translatedArticleId, tah.content ,tah.content, tah.dateAdded , ta.locale as locale')
                ->from('UVDeskSupportCenterBundle:TranslatedArticleHistory', 'tah')
                ->leftJoin('UVDeskSupportCenterBundle:TranslatedArticle', 'ta', 'WITH', 'tah.translatedArticleId = ta.id')
                ->leftJoin('Webkul\UVDesk\CoreBundle\Entity\User','u','WITH', 'tah.userId = u.id')
                ->leftJoin('u.userInstance', 'ud')
                ->addSelect("CONCAT(u.firstName,' ',u.lastName) AS name")
                ->leftJoin('ta.article', 'ar')
                ->andWhere('ta.article = :article')
                ->setParameter('article', $article)
                ->andwhere('ud.supportRole IN (:roleId)')
                ->setParameter('roleId', [1, 2, 3])
                ;
            $qb->orderBy('tah.dateAdded', Criteria::DESC);
            $results = $qb->getQuery()->getArrayResult();
        }

        return $results;
    }
}
